// The mu (mathematical unit) is defined by TeX as 1/18 em
@mu: 1/18em;

@system: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',
  'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
  sans-serif;

.ML__sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.ML__isInline {
  display: inline-block;
}

.ML__base {
  visibility: inherit;
  display: inline-block;
  position: relative;
  cursor: text;
  padding: 0;
  margin: 0;
  box-sizing: content-box;
  border: 0;
  outline: 0;
  vertical-align: baseline;
  font-weight: inherit;
  font-family: inherit;
  font-style: inherit;
  text-decoration: none;
  // Fix width of containers of negative spaces, working around Chrome bug.
  width: min-content;
}

body.ML__fonts-loading .ML__base {
  visibility: hidden;
}

.ML__strut,
.ML__strut--bottom {
  display: inline-block;
  min-height: 0.5em;
}

.ML__small-delim {
  font-family: KaTeX_Main;
}

/* Text mode */
.ML__text {
  font-family: var(--text-font-family, @system);
  white-space: pre;
}

/* Use cmr for 'math upright' */
.ML__cmr {
  font-family: KaTeX_Main;
  font-style: normal;
}

.ML__mathit {
  font-family: KaTeX_Math;
  /* The KaTeX_Math font is italic by default, so the font-style below is only 
     useful when a fallback font is used
  */
  font-style: italic;
}

.ML__mathbf {
  font-family: KaTeX_Main; // Use upright font
  font-weight: bold;
}

/* Lowercase greek symbols should stick to math font when \mathbf is applied 
   to match TeX idiosyncratic behavior */
.lcGreek.ML__mathbf {
  font-family: KaTeX_Math;
  font-weight: normal;
}

.ML__mathbfit {
  font-family: KaTeX_Math;
  font-weight: bold;
  font-style: italic;
}

.ML__ams {
  font-family: KaTeX_AMS;
}

/* Blackboard */
.ML__bb {
  font-family: KaTeX_AMS;
}

.ML__cal {
  font-family: KaTeX_Caligraphic;
}

.ML__frak {
  font-family: KaTeX_Fraktur;
}

.ML__tt {
  font-family: KaTeX_Typewriter;
}

.ML__script {
  font-family: KaTeX_Script;
}

.ML__sans {
  font-family: KaTeX_SansSerif;
}
.ML__series_ul {
  font-weight: 100;
}
.ML__series_el {
  font-weight: 100;
}
.ML__series_l {
  font-weight: 200;
}
.ML__series_sl {
  font-weight: 300;
}

.ML__series_sb {
  font-weight: 500;
}
.ML__bold,
.ML__boldsymbol {
  font-weight: 700;
}
.ML__series_eb {
  font-weight: 800;
}
.ML__series_ub {
  font-weight: 900;
}

.ML__series_uc {
  font-stretch: ultra-condensed;
}
.ML__series_ec {
  font-stretch: extra-condensed;
}
.ML__series_c {
  font-stretch: condensed;
}
.ML__series_sc {
  font-stretch: semi-condensed;
}
.ML__series_sx {
  font-stretch: semi-expanded;
}
.ML__series_x {
  font-stretch: expanded;
}
.ML__series_ex {
  font-stretch: extra-expanded;
}
.ML__series_ux {
  font-stretch: ultra-expanded;
}

.ML__it {
  font-style: italic;
}
.ML__shape_ol {
  -webkit-text-stroke: 1px black;
  text-stroke: 1px black;
  color: transparent;
}
.ML__shape_sc {
  font-variant: small-caps;
}
.ML__shape_sl {
  font-style: oblique;
}

/* First level emphasis */
.ML__emph {
  color: #bc2612;
}
/* Second level emphasis */
.ML__emph .ML__emph {
  color: #0c7f99;
}

// Style used to highlight a portion of the expression when speaking
// it with synchronized highlighting.
// See https://www.w3.org/WAI/RD/2012/text-customization/r11
// and https://www.cs.cmu.edu/~jbigham/pubs/pdfs/2017/colors.pdf
.ML__highlight {
  color: #007cb2; // Complementary to peach
  background: #edd1b0; // Peach
}

.ML__center {
  text-align: center;
}

.ML__frac-line {
  width: 100%;
  min-height: 1px;

  &:after {
    content: '';
    display: block;
    margin-top: -0.04em;
    min-height: 0.04em;
    /* There's a bug since Chrome 62 where 
            sub-pixel border lines don't draw at some zoom 
            levels (110%, 90%). 
            Setting the min-height used to work around it, but that workaround
            broke in Chrome 84 or so.
            Setting the background (and the min-height) seems to work for now.
            */
    background: currentColor;
    box-sizing: content-box; /* Vuetify sets the box-sizing to inherit 
            causes the fraction line to not draw at all sizes (see #26) */
    /* On some versions of Firefox on Windows, the line fails to 
            draw at some zoom levels, but setting the transform triggers
            the hardware accelerated path, which works */
    transform: translate(0, 0);
  }
}

.ML__sqrt {
  display: inline-block;
}

.ML__sqrt-sign {
  display: inline-block;
  font-family: KaTeX_Main;
  position: relative;
}

.ML__sqrt-line {
  display: inline-block;
  height: 0.04em;
  width: 100%;

  &:before {
    content: '';
    display: block;
    margin-top: -0.04em;
    min-height: 0.04em;
    background: currentColor;
  }

  &:after {
    border-bottom-width: 1px;
    content: ' ';
    display: block;
    margin-top: -0.1em;
    /* On some versions of Firefox on Windows, the line fails to 
              draw at some zoom levels, but setting the transform triggers
              the hardware accelerated path, which works */
    transform: translate(0, 0);
  }
}

.ML__sqrt-index {
  // These values are taken from the definition of `\r@@t`,
  // `\mkern 5mu` and `\mkern -10mu`.
  margin-left: 5 * (@mu);
  margin-right: -10 * (@mu);
}

.ML__delim-size1 {
  font-family: KaTeX_Size1;
}
.ML__delim-size2 {
  font-family: KaTeX_Size2;
}
.ML__delim-size3 {
  font-family: KaTeX_Size3;
}
.ML__delim-size4 {
  font-family: KaTeX_Size4;
}

.ML__delim-mult {
  .delim-size1 > span {
    font-family: KaTeX_Size1;
  }
  .delim-size4 > span {
    font-family: KaTeX_Size4;
  }
}

.ML__accent-body > span {
  font-family: KaTeX_Main;
  width: 0;
}

.ML__accent-vec > span {
  position: relative;
  left: 0.38em;
}

.ML__mathlive {
  @ptperem: 10; // This value should equal PT_PER_EM om `font-metrics.ts`
  @nulldelimiterspace: 0.12em;

  @thinspace: 0.16667em; // 3mu
  @mediumspace: 0.22222em; // 4mu
  @thickspace: 0.27778em; // 5mu

  display: inline-block;

  direction: ltr;

  text-align: left;
  text-indent: 0;
  // Prevent a rendering bug that misplaces \vec in Chrome.
  text-rendering: auto;
  font-family: KaTeX_Main;
  font-style: normal;
  font-size-adjust: none;
  font-stretch: normal;
  font-variant-caps: normal;
  letter-spacing: normal;

  word-wrap: normal;
  word-spacing: normal;
  white-space: nowrap;

  text-shadow: none;
  -webkit-user-select: none;
  user-select: none;

  width: min-content;

  // Encourage browsers to consider allocating a hardware accelerated
  // layer for this element.
  transform: translateZ(0);

  .style-wrap {
    position: relative;
  }

  .mfrac,
  .left-right {
    display: inline-block;
  }

  .vlist-t {
    display: inline-table;
    table-layout: fixed;
    border-collapse: collapse;
  }

  .vlist-r {
    display: table-row;
  }

  .vlist {
    display: table-cell;
    vertical-align: bottom;
    position: relative;

    > span {
      display: block;
      height: 0;
      position: relative;

      > span {
        display: inline-block;
      }
      > .pstrut {
        overflow: hidden;
        width: 0;
      }
    }
  }

  .vlist-t2 {
    margin-right: -2px;
  }

  .vlist-s {
    // This cell solves Safari rendering problems. It has text content, so
    // its baseline is used for the table. A very small font avoids line-box
    // issues; absolute units prevent user font-size overrides from breaking
    // rendering. Safari refuses to make the box zero-width, so we give it
    // a known width and compensate with negative right margin on the
    // inline-table. To prevent the "width: min-content" Chrome workaround
    // from shrinking this box, we also set min-width.
    display: table-cell;
    vertical-align: bottom;
    font-size: 1px;
    width: 2px;
    min-width: 2px;
  }
  .msubsup {
    text-align: left;
  }

  .negativethinspace {
    display: inline-block;
    margin-left: -@thinspace;
  }

  .thinspace {
    display: inline-block;
    width: @thinspace;
  }

  .mediumspace {
    display: inline-block;
    width: @mediumspace;
  }

  .thickspace {
    display: inline-block;
    width: @thickspace;
  }

  .enspace {
    display: inline-block;
    width: 0.5em;
  }

  .quad {
    display: inline-block;
    width: 1em;
  }

  .qquad {
    display: inline-block;
    width: 2em;
  }

  .llap,
  .rlap {
    width: 0;
    position: relative;
    display: inline-block;

    > .inner {
      position: absolute;
    }

    > .fix {
      display: inline-block;
    }
  }

  .llap > .inner {
    right: 0;
  }

  .rlap > .inner {
    left: 0;
  }

  .rule {
    display: inline-block;
    border: solid 0;
    position: relative;
    box-sizing: border-box;
  }

  .overline .overline-line,
  .underline .underline-line {
    width: 100%;

    &:before {
      border-bottom-style: solid;
      border-bottom-width: 0.04em;
      content: '';
      display: block;
    }

    &:after {
      border-bottom-style: solid;
      border-bottom-width: 0.04em;
      min-height: thin; /* There's a bug since Chrome 62 where 
            sub-pixel border lines don't draw at some zoom 
            levels (110%, 90%). Setting the min-height seems to work around it.
            */
      content: '';
      display: block;
      margin-top: -1px;
    }
  }

  .stretchy {
    display: block;
    position: absolute;
    width: 100%;
    left: 0;
    overflow: hidden;
    &:before,
    &:after {
      content: '';
    }
    svg {
      display: block;
      position: absolute;
      width: 100%;
      height: inherit;
      fill: currentColor;
      stroke: currentColor;
      fill-rule: nonzero;
      fill-opacity: 1;
      stroke-width: 1;
      stroke-linecap: butt;
      stroke-linejoin: miter;
      stroke-miterlimit: 4;
      stroke-dasharray: none;
      stroke-dashoffset: 0;
      stroke-opacity: 1;
    }
  }

  .slice-1-of-2 {
    display: inline-flex;
    position: absolute;
    left: 0;
    width: 50.2%;
    overflow: hidden;
  }
  .slice-2-of-2 {
    display: inline-flex;
    position: absolute;
    right: 0;
    width: 50.2%;
    overflow: hidden;
  }
  .slice-1-of-3 {
    display: inline-flex;
    position: absolute;
    left: 0;
    width: 25.1%;
    overflow: hidden;
  }
  .slice-2-of-3 {
    display: inline-flex;
    position: absolute;
    left: 25%;
    width: 50%;
    overflow: hidden;
  }
  .slice-3-of-3 {
    display: inline-flex;
    position: absolute;
    right: 0;
    width: 25.1%;
    overflow: hidden;
  }
  .slice-1-of-1 {
    display: inline-flex;
    position: absolute;
    width: 100%;
    left: 0;
    overflow: hidden;
  }

  .nulldelimiter {
    width: @nulldelimiterspace;
    display: inline-block;
  }

  .op-group {
    display: inline-block;
  }

  .op-symbol {
    position: relative;

    &.small-op {
      font-family: KaTeX_Size1;
    }
    &.large-op {
      font-family: KaTeX_Size2;
    }
  }

  .accent {
    > .vlist > span {
      text-align: center;
    }
  }

  .mtable {
    .vertical-separator {
      display: inline-block;
      // margin and border-right are set in Javascript
      min-width: 1px; // Prevent Chrome from omitting a line.
      box-sizing: border-box;
    }

    .arraycolsep {
      display: inline-block;
    }

    .col-align-m > .vlist-t {
      text-align: center;
    }

    .col-align-c > .vlist-t {
      text-align: center;
    }

    .col-align-l > .vlist-t {
      text-align: left;
    }

    .col-align-r > .vlist-t {
      text-align: right;
    }
  }
}

.ML__error {
  // Wavy pattern
  background-image: radial-gradient(
    ellipse at center,
    hsl(341, 100%, 40%),
    rgba(0, 0, 0, 0) 70%
  );

  background-repeat: repeat-x;
  background-size: 3px 3px;
  background-position: 0 98%;
}

.ML__composition {
  background: #fff1c2;
  color: black;
  text-decoration: underline var(--caret, hsl(var(--hue, 212), 40%, 49%));
}

@media (prefers-color-scheme: dark) {
  .ML__composition {
    background: #69571c;
    color: white;
  }
}

.ML__placeholder {
  color: var(--caret, hsl(var(--hue, 212), 40%, 49%));
  padding-left: 0.4ex;
  padding-right: 0.4ex;
  font-family: @system;
}

.ML__placeholdercontainer {
  display: none;
}

.ML__isReadOnly .ML__placeholdercontainer {
  display: block;
}
