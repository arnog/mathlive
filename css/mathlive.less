@import "__fonts.less";

@monospace: 'Source Code Pro', Consolas, 'Roboto Mono', Menlo, 'Bitstream Vera Sans Mono',
    'DejaVu Sans Mono', Monaco, Courier, monospace;
@system: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
    "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans",
    "Droid Sans", "Helvetica Neue", sans-serif;
@math_main: KaTeX_Main;
@math_math: KaTeX_Math;

@font-face {
    font-family: KaTeX_Main;
    src: url(fonts/KaTeX_Main-Regular.woff2) format("woff2"),url(fonts/KaTeX_Main-Regular.woff) format("woff");
    font-weight: 400;
    font-style: normal;
    font-display: "swap";
}

@font-face {
    font-family: KaTeX_Math;
    src: url(fonts/KaTeX_Math-Italic.woff2) format("woff2"),url(fonts/KaTeX_Math-Italic.woff) format("woff");
    font-weight: 400;
    font-style: italic;
    font-display: "swap";
}


@shadow1: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
@shadow2: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
@shadow3: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
@shadow4: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
@shadow5: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);

// 0 8px 10px 1px rgba(0, 0, 0, .14),
//             0 3px 14px 2px rgba(0, 0, 0, .12),
//             0 5px 5px -3px rgba(0, 0, 0, .4)

// 0 2px 2px 0 rgba(0, 0, 0, .14),
//                     0 1px 5px 0 rgba(0, 0, 0, .12),
//                     0 3px 1px -2px rgba(0, 0, 0, .2)

@primary: #0066ce;
@material-primary: #5f97fc;
@secondary: #cd0030;
// @highlight: rgba(243, 243, 21, 0.28);


// The mu (mathematical unit) is defined by TeX as 1/18 em
@mu: 1/18em;

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

.ML__mathit {
    font-family: @math_math;
    /* The @math_math (KaTeX_Math) font is italic 
        by default, so the font-style below is only 
        useful when a fallback font is used
    */
    font-style: italic;        
}

.ML__mathrm {
    font-family: KaTeX_Main;
    font-style: normal;
}

.ML__mathbf {
    font-family: KaTeX_Main;
    font-weight: bold;
}

.ML__mathbfit {
    font-family: @math_math;
    font-weight: bold;
    font-style: italic;
}

.ML__ams {
    font-family: KaTeX_AMS;
}

/* Blackboard */
.ML__bb {
    font-family: KaTeX_AMS;
}

.ML__cal {
    font-family: KaTeX_Caligraphic;
}

.ML__frak {
    font-family: KaTeX_Fraktur;
}

.ML__tt {
    font-family: KaTeX_Typewriter;
}

.ML__script {
    font-family: KaTeX_Script;
}

.ML__sans {
    font-family: KaTeX_SansSerif;
}

.ML__mainit {
    font-family: @math_main;
    font-style: italic;
}

.ML__series_ul { font-weight: 100; }
.ML__series_el { font-weight: 100; }
.ML__series_l { font-weight: 200; }
.ML__series_sl { font-weight: 300; }

.ML__series_sb { font-weight: 500; }
.ML__bold { font-weight: 700; }
.ML__series_eb { font-weight: 800; }
.ML__series_ub { font-weight: 900; }

.ML__series_uc { font-stretch: ultra-condensed; }
.ML__series_ec { font-stretch: extra-condensed; }
.ML__series_c { font-stretch: condensed; }
.ML__series_sc { font-stretch: semi-condensed; }
.ML__series_sx { font-stretch: semi-expanded; }
.ML__series_x { font-stretch: expanded; }
.ML__series_ex { font-stretch: extra-expanded; }
.ML__series_ux { font-stretch: ultra-expanded; }


.ML__it { font-style: italic; }
.ML__shape_ol { -webkit-text-stroke: 1px black; text-stroke: 1px black; color: transparent; }
.ML__shape_sc { font-variant: small-caps; }
.ML__shape_sl { font-style: oblique; }


/* First level emphasis */
.ML__emph { color: #bc2612; }
/* Second level emphasis */
.ML__emph .ML__emph{ color: #0c7f99; }




.ML__mathlive {
    // Style used to highlight a portion of the expression when speaking
    // it with synchronized highlighting.
    // See https://www.w3.org/WAI/RD/2012/text-customization/r11
    // and https://www.cs.cmu.edu/~jbigham/pubs/pdfs/2017/colors.pdf
    .highlight {
        color: #007CB2;         // Complementary to peach
        background: #edd1b0;    // Peach
    }

    // This value is also used in fontMetrics.js, if you change it make sure the
    // values match.
    @ptperem: 10.0;
    @nulldelimiterspace: 1.2em / @ptperem;

    @thinspace:   0.16667em;      // 3mu
    @mediumspace: 0.22222em;      // 4mu
    @thickspace:  0.27778em;      // 5mu



    .reset-textstyle.scriptstyle { font-size: 0.7em; }
    .reset-textstyle.scriptscriptstyle { font-size: 0.5em; }

    .reset-scriptstyle.textstyle { font-size: 1.42857em; }
    .reset-scriptstyle.scriptscriptstyle { font-size: 0.71429em; }

    .reset-scriptscriptstyle.textstyle { font-size: 2em; }
    .reset-scriptscriptstyle.scriptstyle { font-size: 1.4em; }
    .style-wrap {
        position: relative;
    }
    .vlist {
        display: inline-block;

        > span {
            display: block;
            height: 0;
            position: relative;
            line-height: 0;

            // display: flex;
            // flex-direction: row;
            // position: relative;
            // height: 0;

            > span {
                display: inline-block;
            }
        }
    }

    .msubsup {
        text-align: left;
    }

    .mfrac {
        // line-height: 0;
        > span  {
            // justify-content: center;
            text-align: center;
        }

       .frac-line {
            width: 100%;

            // &:before {
            //     border-bottom-style: solid;
            //     border-bottom-width: 1px;
            //     content: "";
            //     display: block;
            // }

            &:after {
                content: "";
                display: block;
                margin-top: -0.04em;
                border-bottom-style: solid;
                border-bottom-width: 0.04em; 
                min-height: 0.04em;   
                 /* There's a bug since Chrome 62 where 
                sub-pixel border lines don't draw at some zoom 
                levels (110%, 90%). Setting the min-height seems to work around it.
                */
            }
        }
    }

    .rspace {
        &.negativethinspace {
            margin-right: -@thinspace;
        }

        &.thinspace {
            margin-right: @thinspace;
        }

        &.negativemediumspace {
            margin-right: -@mediumspace;
        }

        &.mediumspace {
            margin-right: @mediumspace;
        }

        &.thickspace {
            margin-right: @thickspace;
        }

        &.sixmuspace {
            margin-right: 0.333333em;
        }

        &.eightmuspace {
            margin-right: 0.444444em;
        }

        &.enspace {
            margin-right: 0.5em;
        }

        &.twelvemuspace {
            margin-right: 0.666667em;
        }

        &.quad {
            margin-right: 1em;
        }

        &.qquad {
            margin-right: 2em;
        }
    }
    
    .mspace {
        display: inline-block;

        &.negativethinspace {
            margin-left: -@thinspace;
        }

        &.thinspace {
            width: @thinspace;
        }

        &.negativemediumspace {
            margin-left: -@mediumspace;
        }

        &.mediumspace {
            width: @mediumspace;
        }

        &.thickspace {
            width: @thickspace;
        }

        &.sixmuspace {
            width: 0.333333em;
        }

        &.eightmuspace {
            width: 0.444444em;
        }

        &.enspace {
            width: 0.5em;
        }

        &.twelvemuspace {
            width: 0.666667em;
        }

        &.quad {
            width: 1em;
        }

        &.qquad {
            width: 2em;
        }
    }

    .llap,
    .rlap {
        width: 0;
        position: relative;

        > .inner {
            position: absolute;
        }

        > .fix {
            display: inline-block;
        }
    }

    .llap > .inner {
        right: 0;
    }

    .rlap > .inner {
        left: 0;
    }

    .rule {
        display: inline-block;
        border: solid 0;
        position: relative;
    }

    .overline .overline-line,
    .underline .underline-line {
        width: 100%;

        &:before {
            border-bottom-style: solid;
            border-bottom-width: 0.04em;
            content: "";
            display: block;
        }

        &:after {
            border-bottom-style: solid;
            border-bottom-width: 0.04em; 
            min-height: thin;    /* There's a bug since Chrome 62 where 
            sub-pixel border lines don't draw at some zoom 
            levels (110%, 90%). Setting the min-height seems to work around it.
            */
            content: "";
            display: block;
            margin-top: -1px;
        }
    }

    .sqrt {
        display: inline-block;

        > .sqrt-sign {
            font-family: KaTeX_Main;
            position: relative;
        }

        .sqrt-line {
            // line-height: 0;
            height: 0.04em;
            width: 100%;

            &:before {
                content: "";
                display: block;
                margin-top: -0.04em;
                border-bottom-style: solid;
                border-bottom-width: .04em; 
                min-height: 0.5px;    
                /* There's a bug since Chrome 62 where 
                sub-pixel border lines don't draw at some zoom 
                levels (110%, 90%). Setting the min-height seems to work around it.
                */
            }

            &:after {
                border-bottom-width: 1px;
                content: " ";
                display: block;
                margin-top: -0.1em;
            }
        }

        > .root {
            // These values are taken from the definition of `\r@@t`,
            // `\mkern 5mu` and `\mkern -10mu`.
            margin-left: 5*(@mu);
            margin-right: -10*(@mu);
        }
    }

    .sizing, .fontsize-ensurer {
        display: inline-block;

        @size1: 0.5;
        @size2: 0.7;
        @size3: 0.8;
        @size4: 0.9;
        @size5: 1.0;
        @size6: 1.2;
        @size7: 1.44;
        @size8: 1.73;
        @size9: 2.07;
        @size10: 2.49;

        .generate-size-change(@from, @to) {
            &.reset-size@{from}.size@{to} {
                @sizeFromVariable: ~"size@{from}";
                @sizeToVariable: ~"size@{to}";
                font-size: (@@sizeToVariable / @@sizeFromVariable) * 1em;
            }
        }

        .generate-to-size-change(@from, @currTo) when (@currTo =< 10) {
            .generate-size-change(@from, @currTo);

            .generate-to-size-change(@from, (@currTo + 1));
        }

        .generate-from-size-change(@currFrom) when (@currFrom =< 10) {
            .generate-to-size-change(@currFrom, 1);

            .generate-from-size-change((@currFrom + 1));
        }

        .generate-from-size-change(1);
    }

    .delimsizing {
        &.size1 { font-family: KaTeX_Size1; }
        &.size2 { font-family: KaTeX_Size2; }
        &.size3 { font-family: KaTeX_Size3; }
        &.size4 { font-family: KaTeX_Size4; }

        &.mult {
            .delim-size1 > span {
                font-family: KaTeX_Size1;
                vertical-align: top;
            }
            .delim-size4 > span {
                font-family: KaTeX_Size4;
                vertical-align: top;
            }
        }
    }

    .nulldelimiter {
        width: @nulldelimiterspace;
    }

    .op-symbol {
        position: relative;

        &.small-op {
            font-family: KaTeX_Size1;
        }
        &.large-op {
            font-family: KaTeX_Size2;
        }
    }

    .op-limits {
        .vlist > span {
            text-align: center;
        }
    }

    .accent {
        > .vlist > span {
            text-align: center;
        }

        .accent-body > span {
            width: 0;
        }

        .accent-body.accent-vec > span {
            position: relative;
            // This value is half of the value that the MathJax's makeFF shifts
            // it left. We center it by shifting it half way right again.
            left: 0.326em;
        }
    }

    .mtable {
        .vertical-separator {
            display: inline-block;
            margin: 0 -0.025em;
            border-right: 0.05em solid black;
        }

        .arraycolsep {
            display: inline-block;
        }

        .col-align-c > .vlist  {
            text-align: center;
        }

        .col-align-l > .vlist {
            text-align: left;
        }

        .col-align-r > .vlist{
            text-align: right;
        }
    }
}

.ML__smart-fence__close {
    opacity: .5;
}


.ML__selection {
    background: var(--highlight-inactive);
    box-sizing: border-box;
}

.ML__focused .ML__selection {
    background: var(--highlight) !important;
    color: var(--on-highlight);
    // display:inline-block;
}



.ML__command {
    font-family: @monospace;
    letter-spacing: -1px;
    font-weight: 400;

    color: var(--primary);
}



:not(.ML__command) + .ML__command {
    margin-left: .25em;
}

.ML__command + :not(.ML__command)  {
    padding-left: .25em;
}


/* When using smartFence, the anticipated closing fence is displayed 
with this style */
.ML__smart-fence__close {
    opacity: .5;
}

/* The element that displays the keys as the user type them */
.ML__keystroke-caption {
    visibility: hidden;
    /*min-width: 160px;*/
    /*background-color: rgba(97, 97, 200, .95);*/
    background: var(--secondary);
    border-color: var(--secondary-border);
    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
    text-align: center;
    border-radius: 6px;
    padding: 16px;
    position: absolute;
    z-index: 1;

    display: flex;
    flex-direction: row;
    justify-content: center;

    // For keystroke caption
    --keystroke: white;
    --on-keystroke: #555;
    --keystroke-border: #f7f7f7;
}
@media (prefers-color-scheme: dark) {
    body:not([theme="light"]) .ML__keystroke-caption {
        --keystroke: hsl(var(--hue), 50%, 30%);
        --on-keystroke: hsl(0, 0%, 98%);
        --keystroke-border: hsl(var(--hue), 50%, 25%);
    }
}

body[theme="dark"] .ML__keystroke-caption {
    --keystroke: hsl(var(--hue), 50%, 30%);
    --on-keystroke: hsl(0, 0%, 98%);
    --keystroke-border: hsl(var(--hue), 50%, 25%);
}

/* Add an attribute 'data-tooltip' to automatically show a 
   tooltip over a element on hover. 
   Use 'data-position="top"' to place the tooltip above the 
   element rather than below.
   Use 'data-delay' to delay the triggering of the tooltip.
*/
[data-tooltip] {
    position: relative;
    &[data-placement='top']::after {
        top: inherit;
        bottom: 100%;
    }
    &::after {
        position: absolute;
        visibility: hidden;
        content: attr(data-tooltip);
        
        display: inline-table;

        top: 110%;
        // left: -50%;
        // height: 22px;
        width: max-content;
        max-width: 200px;
        padding: 8px 8px;
        background: #616161;    // Grey 700
        color: #fff;
        text-align: center;
        z-index: 2;

        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
        border-radius: 2px;

        font-family: @system;
        font-weight: 400;
        font-size: 12px;

        /* Phone */
        @media only screen and (max-width : 767px) {
            height: 32px;
            padding: 4px 16px;
            font-size: 14px;
        }

        opacity: 0;
        transform: scale(0.5);
        // animation: .150s tooltipFadeOut cubic-bezier(0.4, 0.0, 1, 1) forwards;
        transition: all .150s cubic-bezier(0.4, 0.0, 1, 1);

    }
}

[data-tooltip]:hover {
    position: relative;
    &::after {
        visibility: visible;          // Visible triggers the animation...
        opacity: 1;                   // ... but we start fully transparent to
                                    // give ourselves a delay before showing
        transform: scale(1);        
    }
}

[data-tooltip][data-delay]::after {
    // On fade out, we don't want a delay
    transition-delay: 0s;
}
[data-tooltip][data-delay]:hover::after {
    // But we do want a delay on fade in
    transition-delay: 1s; /* attr(data-delay); Should work. But doesn't. */
}


// @keyframes tooltipFadeIn {
//   0% {
//     opacity: 0;
//     border-bottom-left-radius: 50%;
//     border-bottom-right-radius: 50%;
//     // margin-top: 0;
//     transform: scale(0.5)
//   }
//   100% {
//     opacity: .9;
//     border-bottom-left-radius: 2px;
//     border-bottom-right-radius: 2px;
//     // margin-top: 6px;
//     transform: scale(1)
//   }
// }
// @keyframes tooltipFadeOut {
//   0% {
//     opacity: 0.9;
//     border-bottom-left-radius: 2px;
//     border-bottom-right-radius: 2px;
//     // margin-top: 0;
//     transform: scale(1)
//   }
//   100% {
//     opacity: 0;
//     border-bottom-left-radius: 50%;
//     border-bottom-right-radius: 50%;
//     // margin-top: 6px;
//     transform: scale(.5)
//   }
// }


.can-redo [data-command="\"redo\""] {
    opacity: 1 !important;
}
.can-undo [data-command="\"undo\""] {
    opacity: 1 !important;
}


.ML__keyboard {
    --keyboard-background: rgba(209, 213, 217, .95);
    --keyboard-text: #000;
    --keyboard-text-active: var(--primary);
    --keyboard-background-border: #ddd;
    --keycap-background: white;
    --keycap-background-active: #e5e5e5;
    --keycap-background-border: #e5e6e9;
    --keycap-background-border-bottom: #8d8f92;
    --keycap-text: #000;
    --keycap-text-active: #fff;
    --keycap-secondary-text: #000;

    --keycap-modifier-background: #b9bdc7;
    --keycap-modifier-border: #c5c9d0;
    --keycap-modifier-border-bottom: #989da6;


    --keyboard-alternate-background: #fff;
    --keyboard-alternate-background-active: #e5e5e5;
    --keyboard-alternate-text: #000;

    position: fixed;
    left: 0;
    bottom: -267px;
    width: 100vw;
    z-index: 105;

    padding-top: 5px;

    transform: translate(0, 0); 
    opacity: 0;
    visibility: hidden;
    // To make the keyboard visible, add the .is-visible class
    // This will slide in and fade in the keyboard
    transition: .28s cubic-bezier(0.0, 0.0, 0.2, 1);    // Deceleration curve
    transition-property: transform, opacity;
    &.is-visible {
        transform: translate(0, -267px); 
        opacity: 1;
        visibility: visible;
        transition-timing-function: cubic-bezier(0.4, 0.0, 1, 1); // Acceleration curve
    }

    backdrop-filter: grayscale(50%);
    background-color: var(--keyboard-background);
    border: 1px solid var(--keyboard-background-border);

    font-family: @system;
    font-size: 16px;
    font-weight: 400;

    margin: 0;
    text-shadow: none;
    box-sizing: border-box;

    touch-action: none;
    user-select: none;
    cursor: pointer;

    box-shadow: @shadow2;

    .tex {
        font-family: @math_main, "Cambria Math", "Asana Math", OpenSymbol, Symbola, STIX, Times, serif !important;
    }
    .tex-math {
        font-family: @math_math, "Cambria Math", "Asana Math", OpenSymbol, Symbola, STIX, Times, serif !important;
    }
    .tt {
        font-family: @monospace !important;
        font-size: 30px;
        font-weight: 400;
    }

    /* This is the element that displays alternate keys on press+hold */
    &.alternate-keys {
        visibility: hidden;
        max-width: 286px;
        @media only screen and (max-height : 412px)  {  // 412 is the height of the Google Pixel in landscape mode
            max-width: 320px;
        }

        background-color: var(--keyboard-alternate-background);
        text-align: center;
        border-radius: 6px;
        position: fixed;
        bottom: auto;               // Override the value from ML__keyboard
        top: 0;                     // "
        box-sizing: content-box;    // "
        transform: none;            // "
        z-index: 106;               // Above the keyboard (105)
    
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-content: center;
    
        box-shadow: @shadow4;

        transition: none;

        &.is-visible {
            visibility: visible;
        }
        ul {
            list-style: none;
            margin: 3px;
            padding: 0;
            display: flex;
            flex-flow: row wrap-reverse;
            justify-content: center;
            & > li {        // Alternate Keys
                display: flex;
                flex-flow: column;
                align-items: center;
                justify-content: center;
                font-size: 30px;
                
                height: 70px;
                width: 70px;

                @media only screen and (max-height : 412px)  {
                    font-size: 24px;
                    height: 50px;
                    width: 50px;
                }
                box-sizing: border-box;
                margin: 0;
                background: transparent;
                border: 1px solid transparent; // #e5e6e9;
                border-radius: 5px;
                pointer-events: all;
                color: var(--keyboard-alternate-text);
                fill: currentColor;
                &:hover, &.pressed, &.active {
                    box-shadow: @shadow3;
                    background: var(--keyboard-alternate-background-active);
                    color: var(--keyboard-text-active);
                }
                &.small {
                    font-size: 18px;
                }
                &.small-button {
                    width: 42px;
                    height: 42px;
                    margin: 2px;
                    background: #fbfbfb;
                    &:hover {
                        background: var(--keyboard-alternate-background-active);
                    }
                }
                &.box > div, &.box > span {
                    border: 1px dashed rgba(0, 0, 0, .24);
                }
                // Use to display warning icons, with a SVG icon
                .warning {
                    min-height: 60px;
                    min-width: 60px;
                    background: #cd0030;
                    color: white;
                    padding: 5px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    border-radius: 5px;
                    &:hover, &.pressed, &.active {
                        background: red;
                    }
                    svg {
                        width: 50px;
                        height: 50px;
                    }
               }
                aside {
                    font-size: 12px;
                    line-height: 12px;
                    opacity: .78;
                }
            }
        }
    }
    

    & > div.keyboard-layer {
        display: none;
        outline: none;
        &.is-visible { 
            display: flex; 
            flex-flow: column;
        }
    }
    & > div > div.keyboard-toolbar {
        align-self: center;
        display: flex;
        flex-flow: row;
        justify-content: space-between;
        width: 736px;   // Desktop
        /* Tablet */
        @media only screen and (min-width : 768px) and (max-width : 1024px)  {
            width: 556px;
        }
        /* Phone */
        @media only screen and (max-width : 767px) {
            width: 365px;
            max-width: 100vw;       // iPhone 5 is 320px
        }
        
        /* Icons for undo/redo, etc.. */
        svg {
            height: 20px;
            width: 20px;
        }
        @media only screen and (max-width : 767px)  {
            svg {
                height: 13px;
                width: 17px;
            }
        }
        & > .left {
            justify-content: flex-start;
            display: flex;
            flex-flow: row;
        }
        & > .right {
            justify-content: flex-end;
            display: flex;
            flex-flow: row;
        }
        & > div > div {
            /* "button" in the toolbar */
            display: flex;
            align-items: baseline;
            justify-content: center;

            pointer-events: all;
            color: var(--keyboard-text);
            fill: currentColor;
            background: 0;
            font-size: 110%;
            padding: 4px 15px;
            cursor: pointer;
            min-height: 0;
            border: none;
            padding-left: 10px;
            padding-right: 10px;
            margin-top: 7px;
            margin-bottom: 6px;
            margin-left: 4px;
            margin-right: 4px;
            box-shadow: none;
            border-bottom: 2px solid transparent;

            &.disabled svg, &.disabled:hover svg, &.disabled.pressed svg {
                color: var(--keyboard-text);
                opacity: .2;
            }

            /* iPhone 5 */
            @media only screen and (max-width : 414px)  {
                font-size: 100%;
                padding: 0 6px 0 0;
            }
            /* Phone */
            @media only screen and (max-width : 767px)  {
                padding-left: 4px;
                padding-right: 4px;
                font-size: 90%;
            }
            &:hover, &:active, &.pressed, &.active {
                color: var(--keyboard-text-active);
            }
            &.selected {
                color: var(--keyboard-text-active);
                border-bottom: 2px solid var(--keyboard-text-active);
                margin-bottom: 8px;
                padding-bottom: 0;
            }
        }
    }

    /* Keyboard layouts are made or rows of keys... */
    & div .rows {
        border: 0;
        border-collapse: separate;
        clear: both;
        margin: auto;
        display: flex;
        flex-flow: column;
        align-items: center;
        & > ul {
            list-style: none;
            height: 40px;
            margin: 0 0 3px 0;
            padding: 0;


            
            & > li {
                /* Key widths. A standard key is 10 units wide (w10) */
                /* The formula for wn = n * w10 / 10 + (n -1) * margin-right */
                display: flex;
                flex-flow: column;
                align-items: center;
                justify-content: center;

                width: 34px;
                margin-right: 2px;
                height: 40px;
                box-sizing: border-box;
                padding: 8px 0;
                vertical-align: top;
                text-align: center;
                float: left;

                color: var(--keycap-text);
                fill: currentColor;
                font-size: 20px;
                background: var(--keycap-background);
                border: 1px solid var(--keycap-background-border);
                border-bottom-color: var(--keycap-background-border-bottom);
                border-radius: 5px;
                pointer-events: all;

                /* Last key should be flush against the border */
                &:last-child {
                    margin-right: 0;
                }

                &.small {font-size: 16px;}
                &.tt {color: var(--keyboard-text-active);}

                /* For the alignment of the text on some modifiers (e.g. shift) */
                &.bottom {
                    justify-content: flex-end;
                }
                &.left {
                    align-items: flex-start;
                    padding-left: 4px;
                }
                &.right {
                    align-items: flex-end;
                    padding-right: 4px;
                }

                svg {width: 20px; height: 20px;}
                // Use to display warning icons, with a SVG icon
                .warning {
                    height: 25px;
                    width: 25px;
                    min-height: 25px;
                    min-width: 25px;
                    background: #cd0030;
                    color: white;
                    border-radius: 100%;
                    padding: 5px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin-bottom: -2px;
                    svg {
                        width: 16px;
                        height: 16px;
                    }
                    @media only screen and (max-width : 768px)  {
                        height: 16px;
                        width: 16px;
                        min-height: 16px;
                        min-width: 16px;
                        svg {
                            width: 14px;
                            height: 14px;
                        }
                    }
               }
                & > .w0 {width: 0;}
                & > .w5 {width: 16px;}
                & > .w15 {width: 52px;}
                & > .w20 {width: 70px;}
                & > .w50 {width: 178px;}
                /* Extra spacing between two adjacent keys */
                &.separator {
                    background: transparent;
                    border: none;
                    pointer-events: none;
                }

                // Only show if there's extra room (up to four more columns)
                @media only screen and (max-width : 560px)  {
                    &.if-wide {
                        display: none;
                    }
                }

                &.tex-math {font-size: 25px;}
                // &.tt {font-size: 30px;}
                &:hover, &.pressed {
                    // box-shadow: inset 0 0 1px 1px #8d8f92;
                    background: var(--keycap-background-active);
                    color: var(--keyboard-text-active);
                }
                &.keycap:active, &.keycap.active, &.action:active, &.action.active {
                    transform: translateY(-20px) scale(1.4, 1.4);
                    z-index: 100;
                    color: var(--keyboard-text-active);
                }
                &.modifier:active, &.modifier.active {
                    background: var(--keyboard-text-active);
                    color: var(--keycap-text-active);
                }
                &.action.font-glyph, &.modifier.font-glyph {
                    font-size: 18px;
                    @media only screen and (max-width : 767px) {
                        font-size: 16px;
                    }
                }


                // Waves effect
                position: relative;
                overflow: hidden;
                user-select: none;
                -webkit-tap-highlight-color: transparent;
                // z-index: 1;
                // transition: .14s cubic-bezier(.4, 0, .2, 1);
                &.fnbutton, &.bigfnbutton {
                    @media only screen and (max-width : 767px)  {
                        font-size: 12px;
                    }
                    // width: 60px;
                    // max-width: 60px;
                }
                &.bigfnbutton {
                    font-size: 14px;
                    @media only screen and (max-width : 767px)  {
                        font-size: 9px;
                    }
                }
                &.modifier, &.action {
                    background-color: var(--keycap-modifier-background);
                    border-color: var(--keycap-modifier-border);
                    border-bottom-color: var(--keycap-modifier-border-bottom);
                    font-size: 65%;
                    font-weight: 100;
                }
                &.modifier.selected, &.action.selected {
                    color: var(--keyboard-text-active);
                    &:hover, &:active, &.pressed, &.active {
                        color: white;
                    }
                }
                &.keycap.w50 {
                    font-size: 80%;
                    padding-top: 10px;
                    font-weight: 100;
                }            
                small {
                    color: #555;
                    @media only screen and (max-width : 767px)  {
                        font-size: 9px;
                    }                
                }
                aside {
                    font-family: @system;
                    font-size: 10px;
                    line-height: 10px;
                    color: #666;
                    /* On small screens, don't display */
                    @media only screen and (max-width : 767px)  {
                        display: none;
                    }
                }
        }

        }
        /* iPhone 5 */
        @media only screen and (max-width : 414px)  {
            & > ul { 
                & > li {
                    width: 29px;
                    margin-right: 2px;
                }
                & > .w5 { width: 13.5px; }
                & > .w15 { width: 44.5px; }
                & > .w20 { width: 60px; }
                & > .w50 { width: 153px; }
            }
        }
        /* Pixel, iPhone 6,7,8+ */
        @media only screen and (min-width : 415px) and (max-width : 768px)  {
            & > ul { 
                & > li {
                    width: 37px;
                    margin-right: 3px;
                }
                & > .w5 { width: 17px; }
                & > .w15 { width: 57px; }
                & > .w20 { width: 77px; }
                & > .w50 { width: 197px; }
            }
        }
        /* Tablet size */
        @media only screen and (min-width : 768px) and (max-width : 1024px)  {
            & > ul { 
                height: 52px; 
                & > li {
                    height: 52px;
                    width: 51px;
                    margin-right: 4px;
                }
                & > .w5 { width: 23.5px; }
                & > .w15 { width: 78.5px; }
                & > .w20 { width: 106px; }
                & > .w50 { width: 271px; }
            }
        }
        /* Desktop size */
        @media only screen and (min-width : 1025px)  {
            & > ul { 
                height: 52px; 
                & > li {
                    height: 52px;
                    width: 66px;
                    margin-right: 6px;
                }
                & > .modifier, & > .action {
                    font-size: 80%;
                }
                & > .w5 { width: 30px; }
                & > .w15 { width: 102px; }
                & > .w20 { width: 138px; }
                & > .w50 { width: 354px; }
            }
        }
    }
}
@media (prefers-color-scheme: dark) {
    body:not([theme="light"]) .ML__keyboard {
        --hue: 206;
        --keyboard-background: hsl(var(--hue),19%,38%);
        --keyboard-text: #f0f0f0;
        --keyboard-text-active: hsl(var(--hue), 100%, 60%);
        --keyboard-background-border: hsl(0,0%,20%);
        --keycap-background: hsl(var(--hue), 25%, 39%);
        --keycap-background-active: hsl(var(--hue), 35%, 42%);
        --keycap-background-border: hsl(var(--hue), 25%, 35%);
        --keycap-background-border-bottom: hsl(206, 35%, 40%);
        --keycap-text: hsl(0,0%,81.6%);
        --keycap-text-active: #000;
        --keycap-secondary-text: #fff;

        --keycap-modifier-background: hsl(var(--hue), 35%, 40%);
        --keycap-modifier-border: hsl(var(--hue), 35%, 35%);
        --keycap-modifier-border-bottom: hsl(var(--hue), 35%, 42%);

        --keyboard-alternate-background: hsl(var(--hue),19%,38%);
        --keyboard-alternate-background-active: hsl(var(--hue),35%,42%);
        --keyboard-alternate-text: hsl(0,0%,82%);
    }
}
    /* Same as the media query, but with a class */
    body[theme="dark"] .ML__keyboard {
        --hue: 206;
        --keyboard-background: hsl(var(--hue),19%,38%);
        --keyboard-text: #f0f0f0;
        --keyboard-text-active: hsl(var(--hue), 100%, 60%);
        --keyboard-background-border: hsl(0,0%,20%);
        --keycap-background: hsl(var(--hue), 25%, 39%);
        --keycap-background-active: hsl(var(--hue), 35%, 42%);
        --keycap-background-border: hsl(var(--hue), 25%, 35%);
        --keycap-background-border-bottom: hsl(206, 35%, 40%);
        --keycap-text: hsl(0,0%,81.6%);
        --keycap-text-active: #000;
        --keycap-secondary-text: #fff;

        --keycap-modifier-background: hsl(var(--hue), 35%, 40%);
        --keycap-modifier-border: hsl(var(--hue), 35%, 35%);
        --keycap-modifier-border-bottom: hsl(var(--hue), 35%, 42%);

        --keyboard-alternate-background: hsl(var(--hue),19%,38%);
        --keyboard-alternate-background-active: hsl(var(--hue),35%,42%);
        --keyboard-alternate-text: hsl(0,0%,82%);;
    }


/* The 'material' theme for the virtual keyboard */
div.ML__keyboard.material  {
    --keyboard-background: rgba(209, 213, 217, .9);
    --keyboard-background-border: #ddd;
    --keycap-background: transparent;
    --keycap-background-active: #cccfd1;
    --keycap-background-border: transparent;

    --keyboard-alternate-background: #efefef;
    --keyboard-alternate-text: #000;

    font-family: Roboto, sans-serif;

    &.alternate-keys {
        background: var(--keyboard-alternate-background);
        border: 1px solid transparent;
        border-radius: 5px;
        box-shadow: @shadow4;

        ul li:hover, ul li:active, ul li.active, ul li.pressed {
            border: 1px solid transparent;
            background: @material-primary;
            color: white;
            fill: currentColor;
        }
    }

    .keyboard-toolbar {
        & > div > div {
            font-size: 16px;
        }
        div div:hover, div div:active, div.div.active, div.div.pressed {
            color: @material-primary;
            fill: currentColor;
        }
        & > div > .selected {
            color: @material-primary;
            fill: currentColor;
            border-bottom: 2px solid @material-primary;
            margin-bottom: 8px;
            padding-bottom: 0;
        }
    }
    div > .rows > ul > .keycap {
        background: transparent;
        border: 1px solid transparent;
        border-radius: 5px;
        color: var(--keycap-text);
            fill: currentColor;

        &.tt {
            color: @material-primary;
        }

        // transition: .14s cubic-bezier(.4, 0, .2, 1);
        transition: none;
        &[data-key=' '] {
            margin-top: 10px;
            margin-bottom: 10px;
            height: 20px;
            background: #e0e0e0;

            &:hover, &:active, &.active, &.pressed {
                background: #d0d0d0;
                box-shadow: none;
                transform: none;
            }
        }
        &:not([data-key=' ']):hover {
            border: 1px solid transparent;
            background: var(--keycap-background-active);
            box-shadow: none;
        }
        &:not([data-key=' ']).pressed, 
        &:not([data-key=' ']).active,
        &:not([data-key=' ']):active  {
            background: var(--keyboard-alternate-background);
            color: var(--keyboard-alternate-text);
            box-shadow: @shadow3;
            @media only screen and (max-width : 767px) {
                box-shadow: @shadow3;
                font-size: 10px;
                vertical-align: top;
                width: 19.5px;
                margin-right: 10px;
                margin-left: 10px;
                transform: translateY(-20px) scale(2, 2);
                // transition: .07s cubic-bezier(.4, 0, .2, 1);
                transition: none;
                justify-content: flex-start;
                padding: 2px 0 0 0;
                z-index: 100;
            }
            @media only screen and (max-width : 414px)  {
                width: 16.5px;
            }
        }
        &:last-child:active, 
        &:last-child.active {
            @media only screen and (max-width : 767px) {
                margin-right: 0;
                margin-left: 14px;
            }
        }
    }
    div div.rows ul li.modifier, div div.rows ul li.action {
        background: transparent;
        border: 0;
        color: #869096;
        fill: currentColor;
        font-size: 16px;
        // transition: .28s cubic-bezier(.4, 0, .2, 1);
        transition: none;
        &.selected {
            color: @material-primary;
            border-radius: 0;
            border-bottom: 2px solid @material-primary;
        }
        &:hover, &:active, &.active, &.pressed {
            border: 0;
            color: var(--keycap-text);
            background: var(--keycap-background-active);
            box-shadow: none;
        }
    }
    div div.rows ul li.fnbutton, div div.rows ul li.bigfnbutton {
        background: transparent;
        border: 0;
        // transition: .28s cubic-bezier(.4, 0, .2, 1);
        &.selected, &.selected {
            color: @material-primary;
            fill: currentColor;
            border-radius: 0;
            border-bottom: 2px solid @material-primary;
        }
        &:hover, &:active, &.pressed, &.active {
            border: 0;
            color: @material-primary;
            fill: currentColor;
            background: var(--keycap-background-active);
            box-shadow: none;
        }

    }
};


@media (prefers-color-scheme: dark) {
    body:not([theme="light"]) div.ML__keyboard.material {
        --hue: 198;
        --keyboard-background: hsl(var(--hue),19%,18%);
        --keyboard-text: #d4d6d7;
        --keyboard-text-active: @material-primary;
        --keyboard-background-border: hsl(0,0%,20%);
        --keycap-background: hsl(var(--hue), 25%, 39%);
        --keycap-background-active: @material-primary;
        --keycap-background-border: transparent;
        --keycap-background-border-bottom: transparent;
        --keycap-text: hsl(0,0%,81.6%);
        --keycap-text-active: #d4d6d7;
        --keycap-secondary-text: @material-primary;

        --keycap-modifier-background: hsl(var(--hue), 35%, 40%);
        --keycap-modifier-border: hsl(var(--hue), 35%, 35%);
        --keycap-modifier-border-bottom: hsl(var(--hue), 35%, 42%);


        --keyboard-alternate-background: hsl(var(--hue),8%,2%);
        --keyboard-alternate-background-active: hsl(var(--hue),35%,42%);
        --keyboard-alternate-text: hsl(0,0%,82%);
    }
}
body[theme="dark"] div.ML__keyboard.material {
    --hue: 198;
    --keyboard-background: hsl(var(--hue),19%,18%);
    --keyboard-text: #d4d6d7;
    --keyboard-text-active: @material-primary;
    --keyboard-background-border: hsl(0,0%,20%);
    --keycap-background: hsl(var(--hue), 25%, 39%);
    --keycap-background-active: @material-primary;
    --keycap-background-border: transparent;
    --keycap-background-border-bottom: transparent;
    --keycap-text: hsl(0,0%,81.6%);
    --keycap-text-active: #d4d6d7;
    --keycap-secondary-text: @material-primary;

    --keycap-modifier-background: hsl(var(--hue), 35%, 40%);
    --keycap-modifier-border: hsl(var(--hue), 35%, 35%);
    --keycap-modifier-border-bottom: hsl(var(--hue), 35%, 42%);


    --keyboard-alternate-background: hsl(var(--hue),8%,2%);
    --keyboard-alternate-background-active: hsl(var(--hue),35%,42%);
    --keyboard-alternate-text: hsl(0,0%,82%);
}


.ML__error {
    // Wavy pattern
    background-image: radial-gradient(ellipse at center, 
        hsl(341,100%,40%),rgba(0,0,0,0) 70%);

    background-repeat: repeat-x;
    background-size: 3px 3px;
    background-position:0 98%;
}

.ML__suggestion {
    opacity: .50;
}

.ML__placeholder {
    opacity: .7;
    padding-left: .5ex;
    padding-right: .5ex;
}


.ML__keystroke-caption > span {
    min-width: 14px;
    /*height: 8px;*/
    margin: 0 8px 0 0;
    padding: 4px;

    background-color: var(--keystroke);
    color: var(--on-keystroke);
    fill: currentColor;

    font-family: @system;
    font-size: 1em;
    // text-shadow: 0 1px #fff;
    // letter-spacing: -0.07rem;

    border-radius: 6px;
    border: 2px solid var(--keystroke-border);

    /*box-shadow: 0 7px 14px rgba(0,0,0,0.25), 0 5px 5px rgba(0,0,0,0.22);*/
    // box-shadow: @shadow1;
}



.ML__virtual-keyboard-toggle.pressed {
    background: hsla(0, 0%, 70%, .5);
}

.ML__virtual-keyboard-toggle:focus {
    outline: none;
    border-radius: 50%;
    border: 2px solid var(--primary);
}


.ML__virtual-keyboard-toggle.active:hover, 
.ML__virtual-keyboard-toggle.active {
    background: hsla(0, 0%, 70%, .5);
    color: #000;
    fill: currentColor;
}
    

div.ML__popover.is-visible {
    visibility: visible;
    animation: ML__fade-in cubic-bezier(0.0, 0.0, 0.2, 1) .15s;
}
@keyframes ML__fade-in {
    from {opacity: 0;}
    to {opacity:1 ;}
}

/* The wrapper class for the entire content of the popover panel */
.ML__popover__content {
    border-radius: 6px;
    padding: 2px;
    cursor: pointer;
    min-height: 100px;

    display: flex;
    flex-direction: column;
    justify-content: center;
    margin-left: 8px;
    margin-right: 8px;
    a {
        color: #5Ea6Fd;
        padding-top: .3em;
        margin-top: .4em;
        display: block;
        &:hover {
            color: #5Ea6Fd;
            text-decoration: underline;
        }
    }
    /* Since the content can be clicked on, provide feedback on hover */
    &:hover, 
    &.pressed,
    &.active {
        background: rgba(255, 255, 255, .1);
    }
}



/* The command inside a popover (inside a ML__popover-content) */
.ML__popover__command {
    font-size: 1.6rem;
}

.ML__popover__prev-shortcut {
    height: 31px;
    opacity: .1;
    cursor: pointer;

    margin-left: 8px;
    margin-right: 8px;
    padding-top: 4px;
    padding-bottom: 2px;
}

.ML__popover__prev-shortcut:hover, 
.ML__popover__next-shortcut:hover{
    opacity: .3;
}

.ML__popover__prev-shortcut.pressed,
.ML__popover__next-shortcut.pressed {
    opacity: 1;
}

.ML__popover__prev-shortcut.active, 
.ML__popover__next-shortcut.active {
    opacity: 1;
}

.ML__popover__prev-shortcut > span, 
.ML__popover__next-shortcut > span {
    padding: 5px;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: inline-block;
}

.ML__popover__prev-shortcut > span > span {
    margin-top: -2px;
    display: block;
}

.ML__popover__next-shortcut > span > span {
    margin-top: +2px;
    display: block;
}


.ML__popover__prev-shortcut:hover > span, 
.ML__popover__next-shortcut:hover > span {
    background: rgba(255, 255, 255, .1);
}

.ML__popover__next-shortcut {
    height: 34px;
    opacity: .1;
    cursor: pointer;

    margin-left: 8px;
    margin-right: 8px;
    padding-top: 2px;
    padding-bottom: 4px;
}

/* The keyboard shortcuts for a symbol as displayed in the popover */
.ML__popover__shortcut {
    font-family: @system;
    font-size: .8em;
    opacity: .7;

    margin-top: .25em;
    padding-top: .25em;
}

/* The field in a popover that provides some info about the symbol */
.ML__popover__note {
    font-family: @system;
    font-size: .8rem;
    opacity: .7;

    line-height: 1em;

    padding-left: .5em;
    padding-right: .5em;
    padding-top: .25em;
}

/* Style for the character that joins the modifiers of a keyboard shortcut 
(usually a "+" sign)*/
.ML__shortcut-join {
    opacity: .5;
}

/* Styling for an element which is overlaid 
to the left and right of the mathfield while 
scrolling to prevent the capture of hover events */
.ML__scroller {
    position: fixed;
    z-index: 1;
    top: 0;
    height: 100vh;
    width: 200px;
}
